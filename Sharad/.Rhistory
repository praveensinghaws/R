# These lines are for explanatory or descriptive comments and are not executed by the R interpreter.
# This is Proper Comment
# This is a multiline comment in R.
# You can add multiple lines by starting each line with the '#' symbol.
# These lines are for explanatory or descriptive comments and are not executed by the R interpreter.
# This is Proper Comment
# This is a multiline comment in R.
# You can add multiple lines by starting each line with the '#' symbol.
# These lines are for explanatory or descriptive comments and are not executed by the R interpreter.
# This is Proper Comment
# This is a multiline comment in R.
# You can add multiple lines by starting each line with the '#' symbol.
# These lines are for explanatory or descriptive comments and are not executed by the R interpreter.
# This is Proper Comment
# This is a multiline comment in R.
# You can add multiple lines by starting each line with the '#' symbol.
# These lines are for explanatory or descriptive comments and are not executed by the R interpreter.
# Creating a variable in R
name <- "Praveen Singh"
age <- 35
name = "Praveen Kumar Singh"
name <- "Praveen Singh"
age <- 35
name = "Praveen Kumar Singh"
name
print(name)
# Program : Example of situation based print argument
for (i in 1:10) {print(i)}
for (i in 1:10) {print(i)}
for (i in 1:10) {
print(i)
}
for (i in 1:10) {
print(i)
}
reticulate::repl_python()
# 3.While Loop Example
i <- 1
while (i <6) {
print(i)
i <- i +1
}
# 1. While Loop Example
count <- 1
while (count <= 5) {
print(paste("Iteration:", count))
count <- count + 1
}
# 2. For Loop Example
for (i in 1:5) {
print(paste("Iteration:", i))
}
i <- 1
while (i < 15) {
print(i)
i <- i + 1
if (i == 10) {
break
}
}
i <- 0
while (i < 20) {
i <- i + 1
if (i == 8) {
next
}
print(i)
}
i <- 0
while (i < 20) {
i <- i + 1
if (i == 8) {
next
}
print(i)
}
i <- 0
while (i < 10) {
i <- i + 1
if (i == 7) {
next
}
print(i)
}
i <- 0
while (i < 10) {
i <- i + 1
if (i == 7) {
next
}
print(i)
}
dice <- 1
while (dice <= 6) {
if (dice < 6) {
print("No sixer")
} else {
print("Yea, we got six")
}
dice <- dice + 1
}
dice <- 1
while (dice <= 6) {
if (dice < 6) {
print("No Sixer")
} else {
print("yes we got Six")
}
dice <- dice +1
}
# 1. For Loop Example
for (i in 1:5) {
print(paste("Iteration:", i))
}
for (i in 4:10) {
print(i)
}
for (i in 4:10) {
print(i +1 )
}
for (i in 4:10) {
print(i^2)
}
for (x in 1:10) {
print(x)
}
fruits <- list("Apple" , "Banana" , "Cherry")
fruits <- list("Apple" , "Banana" , "Cherry")
for (x in fruits) {
print(x)
}
dice <- c(1,2,3,4,5,6)
for (i in dice) {
print(i)
}
fruits <- list("Apple" , "Banana" , "Cherry")
for (x in fruits) {
if (x == "Cherry") {
break
}
print(x)
}
fruits <- list("Apple" , "Banana" , "Cherry")
for (x in fruits) {
if(x == "Banana") {
next
}
print(x)
}
pks <- list ("Red","Big","Tasty")
fruits <- list("Apple" , "Banana" , "Cherry")
pks <- list ("Red","Big","Tasty")
fruits <- list("Apple" , "Banana" , "Cherry")
for (x in pks) {
for (y in fruits) {
print(paste(x,y))
}
}
myfun <- function() {
print("Hi Praveen , How are You?")
}
myfun <- function() {
print("Hi Praveen , How are You?")
}
View(myfun)
View(myfun)
View(myfun)
View(myfun)
View(myfun)
View(myfun)
View(myfun)
myfun()
View(myfun)
View(myfun)
View(myfun)
View(myfun)
View(myfun)
View(myfun)
function() {
print("Hi Praveen , How are You?")
}
# Arguments: it is an information that can be passed into a function for the result.
myfun <- function(fname) {
paste(fname , "is Data Analyst")
}
myfun(Praveen)
myfun(Praveen)
myfun("Pravee")
myfun("Praveen")
myfun("Praveen")
myfun()
myfun <- function(fname , lname) {
paste(fname, lname)
}
myfun("Praveen" , 100)
myfun("Praveen" , "Singh")
myfun("Praveen" , 1990)
myfun("Hi Praveen you are " ,"33 Years Old")
myfun("Hi Praveen you are" ,"33 Years Old")
# Default Parameter Value
pksfun <- function(country = "India") {
paste("I am from" , country)
}
pksfun()
pksfun("Lucknow")
pksfun("Lucknow")
pksfun()
pksfun("Canada")
pksfun("Lucknow")
pksfun()
pksfun("France")
pksfun("Lucknow")
pksfun("Canada")
View(pksfun)
function(country = "India") {
paste("I am from" , country)
}
pksfun <- function(x) {
return(5 * x)
}
pksfun()
pksfun(5)
pksfun("Praveen")
pksfun("Praveen")
pksfun(25)
pksfun(10)
pksfun(20)
pksfun(20)
pksfun
pksfun(25)
View(myfun)
nest_func(nest_func(2,2),nest_func(3,3))
nest_func <- function(x,y) {
a <- x + y
return (a)
}
nest_func(nest_func(2,2),nest_func(3,3))
nest_func(nest_func(2,2),nest_func(1000,1000))
nest_func(nest_func(12,12),nest_func(1000,1000))
outer_func <- function(x) {
inner_func <- function(y){
a <- x + y
return(a)
}
return(inner_func)
}
View(outer_func)
outer_func()
output  <- outer_func(3)
output(5)
try_recursion <- function(k) {
if (k > 0){
result <- k + try_recursion(k-1)
print(result)
} else {
result = 0
return(result)
}
}
try_recursion(6)
# 9. Recursive Factorial Function
factorial <- function(n) {
if (n == 0 || n == 1) {
return(1)
} else {
return(n * factorial(n - 1))
}
}
# Calculate factorial of 5
result <- factorial(5)
print(result)
# Calculate factorial of 5
result <- factorial(5)
print(result)
# Calculate factorial of 5
result <- factorial(2)
print(result)
# Calculate factorial of 5
result <- factorial(5)
print(result)
possition <- "Data Analyst"
myfunc <- function() {
paste("Praveen is", possition)
}
myfunc()
possition <- "Data Analyst"
myfunc <- function() {
paste("Praveen is a ", possition)
}
myfunc()
possition <- "Praveen Singh"
myfunc <- function() {
possition <- "Data Analyst"
paste("My Self", possition)
}
myfunc()
possition <- "Praveen Singh"
myfunc <- function() {
possition <- "Data Analyst"
paste("I am a ", possition)
}
myfunc()
possition <- "Praveen Singh"
myfunc <- function() {
possition <- "Data Analyst"
paste("I am a", possition)
}
myfunc()
possition
print(possition)
possition <- "Praveen Singh"
myfunc <- function() {
possition <- "Data Analyst"
paste("I am a", possition)
}
myfunc()
print(possition)
possition <- "Praveen Singh"
myfunc <- function() {
possition <<- "Data Analyst"
paste("I am a", possition)
}
myfunc()
print(possition)
print(possition)
print(possition)
print(possition)
print(possition)
myfunc()
possition <- "Data Analyst"
myfunc <- function() {
paste("Praveen is a ", possition)
}
myfunc()
# 1. Using a global variable inside a function
possition <- "Data Analyst"
myfunc <- function() {
paste("Praveen is a ", possition)
}
myfunc()
possition <- "Praveen Singh"
myfunc <- function() {
possition <- "Data Analyst"
paste("I am a", possition)
}
myfunc()
print(possition)
possition <- "Praveen Singh"
myfunc <- function() {
possition <<- "Data Analyst"
paste("I am a", possition)
}
myfunc()
myfunc()
print(possition)  # This prints the modified global variable value.
possition
possition
setwd("~/Code/GITHUB-REPO/R/Sharad")
possition <- "Awesome"
myfunc <- function() {
possition <<- "Fantastic"
paste("Praveen is", possition)
}
myfunc()
# 4. Initialize a variable named 'possition' with the value "Awesome"
possition <- "Awesome"
# Define a function named 'myfunc'
myfunc <- function() {
# Use the <<- operator to assign the value "Fantastic" to the global variable 'possition'
possition <<- "Fantastic"
# Concatenate a string and the value of 'possition' and store it in the 'result' variable
result <- paste("Praveen is", possition)
# Print the result
print(result)
}
# Call the function 'myfunc' to execute the code inside it
myfunc()
# Vectors in R: a vector is simply a list of items that are of the same type.
# Vector of a Strings
fruits <- c("Banana" , "Apple" , "Orange")
fruits
# Vector of Numerical Value
numbers <- c(1,2,3)
numbers
# Vector with numerical values in a sequence
number <- 1:10
number
# Vectors with numerical decimal in a sequence
number1 <- 1.5 :6.5
number1
number1
number2 <- 1.5 : 6.3
number2
#
# Vectors of Logical Values
# Example:A
values <- c(TRUE , FALSE , TRUE , FALSE)
values
fruits <- c("Banana" , "Apple" , "Orange")
length(fruits)
sort(fruits)
# Vectors Sort
fruits <- c("Banana" , "Apple" , "Orange" ,"Mango" , "Cherry" , "Lemon")
numbers <- c(13,3,5,7,20,2)
sort(fruits)
sort(numbers)
fruits <- c("Banana" , "Apple" , "Orange")
fruits[0]
fruits[1]
# Access a Vector
fruits <- c("Banana" , "Apple" , "Orange")
fruits[2]
fruits[2]
fruits[1]
fruits[1:2]
fruits[-1]
fruits[-3]
fruits[-2]
fruits[-2]
fruits[-2]
fruits[-2]
fruits[-2]
fruits[-3]
fruits[-3]
fruits[-3]
fruits <- c("Banana" , "Apple" , "Orange")
fruits[2]
fruits[1]
fruits[1:2]
fruits[-1]
fruits[-2]
fruits[-3]
fruits[c(1,3)]
fruits[c(1,2)]
fruits[c(-1)]
fruits <- c("Banana" , "Apple" , "Orange" ,"Mango" , "Cherry" , "Lemon")
fruits[c(-1)]
fruits[-1]
fruits[-1]
fruits[-1]
# 1. Vector of Strings
fruits <- c("Banana", "Apple", "Orange")
fruits
# 2. Vector of Numerical Values
numbers <- c(1, 2, 3)
numbers
# 3. Vector with Numerical Values in a Sequence
number <- 1:10
number
# 4. Vectors with Numerical Decimal Values in a Sequence
# Example A
number1 <- 1.5:6.5
number1
# Example B
number2 <- 1.5:6.3
number2
# 5. Vectors of Logical Values
# Example A
values <- c(TRUE, FALSE, TRUE, FALSE)
values
# 6. Vectors Length
fruits <- c("Banana", "Apple", "Orange")
length(fruits)
# 7. Vectors Sort
fruits <- c("Banana", "Apple", "Orange", "Mango", "Cherry", "Lemon")
numbers <- c(13, 3, 5, 7, 20, 2)
sort(fruits)
sort(numbers)
# 8. Access a Vector
fruits <- c("Banana", "Apple", "Orange")
fruits[2]
fruits[1]
fruits[c(1, 3)]
fruits[c(1, 2)]
fruits[1:2]
# 9. Negative Indexing to Access the Last Item
fruits <- c("Banana", "Apple", "Orange", "Mango", "Cherry", "Lemon")
fruits[c(-1)]
fruits[-1]
fruits[-2]
fruits[-3]
# 10.how to change a n item in the list vector
fruits <- c("Banana", "Apple", "Orange", "Mango", "Cherry", "Lemon")
fruits
fruits
fruits[1] <- "Pear"
fruits
repeatname <- rep(c(1,2,3), each = 3))
repeatname <- rep(c(1,2,3), each = 3)
repeatname
repeatname
repeatname
repeatname
repeatname
repeatname
repeatname
repeatname
repeatname
repeatname
repeatname
repeatname
repeatname
reptimes <- rep(c(1,2,3),times=3)
reptimes
repindep <- rep(c(1,2,3),times=c(5,2,1))
repindep
num1 <- 1:10
num1
num1 <- 1:10
num1
num2 <- seq(from = 0 , to = 100 , by = 10 )
num2
